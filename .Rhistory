)
# plot
facet_plot <- ggplot() +
# Individual simulation lines in light gray
geom_line(data = combined_long,
aes(x = plot_time, y = Population, group = run),
alpha = 0.5, color = "gray60") +
# 95% confidence interval ribbons
geom_ribbon(data = ci_trend,
aes(x = plot_time, ymin = lower, ymax = upper, fill = Stage),
alpha = 0.3, inherit.aes = FALSE) +
# Mean trajectories
geom_line(data = ci_trend,
aes(x = plot_time, y = mean, color = Stage),
linewidth = 1.2, inherit.aes = FALSE) +
# Facet by life stage
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
# Color scales
scale_color_manual(values = stage_colors, guide = "none") +
scale_fill_manual(values = stage_colors, guide = "none") +
# Labels and theme
labs(
title = "",
x = "Time (days)",
y = "Population"
) +
geom_vline(xintercept = c(365, 730), linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),  # Increase facet title font size
axis.text = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
facet_plot
# Step 6: Save as high-res PDF
#ggsave("stage_spaghetti_faceted_years3to5.pdf", facet_plot, width = 10, height = 8, dpi = 300)
# Add a date column assuming simulation Year 3 starts on Jan 1, 2020
combined_long$plot_date <- as.Date("2020-01-01") + combined_long$plot_time - 1
ci_trend$plot_date <- as.Date("2020-01-01") + ci_trend$plot_time - 1
facet_plot2 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population, group = run),
color = "gray60", alpha = 0.4, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower, ymax = upper, fill = Stage),
alpha = 0.2, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
# Month formatting for x-axis
scale_x_date(
date_breaks = "1 month",
date_labels = "%b"  # "Jan", "Feb", ...
) +
labs(
title = "",
x = "Month",
y = "Population"
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +  # Year dividers
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 12, angle = 90, hjust = 1)
)
facet_plot2
# Express population in hundreds (i.e., divide by 100) in the data
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
# Replace variables with their scaled versions
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 13),
axis.title = element_text(size = 13, face = "bold"),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 11)
)
facet_plot3
# Save as PDF
#ggsave("stage_spaghetti_faceted.pdf", facet_plot3, width = 10, height = 8) #fig.height=10, fig.width=15
# Express population in hundreds (i.e., divide by 100) in the data
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
# Replace variables with their scaled versions
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 13, face = "bold"),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 11)
)
facet_plot3
# Save as PDF
#ggsave("stage_spaghetti_faceted.pdf", facet_plot3, width = 10, height = 8) #fig.height=10, fig.width=15
# Express population in hundreds (i.e., divide by 100) in the data
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
# Replace variables with their scaled versions
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 13, face = "bold"),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 11)
)
facet_plot3
# Save as PDF
#ggsave("stage_spaghetti_faceted.pdf", facet_plot3, width = 10, height = 8) #fig.height=10, fig.width=15
# Express population in hundreds (i.e., divide by 100) in the data
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
# Replace variables with their scaled versions
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),
axis.title = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.text.y = element_text(size = 12)
)
facet_plot3
# Save as PDF
#ggsave("stage_spaghetti_faceted.pdf", facet_plot3, width = 10, height = 8) #fig.height=10, fig.width=15
# Express population in hundreds (i.e., divide by 100) in the data
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
# Replace variables with their scaled versions
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14)
)
facet_plot3
# Save as PDF
#ggsave("stage_spaghetti_faceted.pdf", facet_plot3, width = 10, height = 8) #fig.height=10, fig.width=15
# Load necessary packages
pacman::p_load(dplyr, lubridate, deSolve, ggplot2, patchwork, parallel)
# Load rainfall data
rainfall_data <- read.csv(file = "rainfall_data.csv")
# Function to sample rainfall with seasonal preservation
sample_rainfall_vector <- function(times, data) {
sapply(times, function(t) {
reference_date <- as.Date("2008-01-01") + t
current_month <- as.numeric(format(reference_date, "%m"))
monthly_data <- data %>% filter(Month == current_month) %>% pull(Total.Rain.mm)
if (length(monthly_data) > 0) {
sampled_value <- sample(monthly_data, size = 1, replace = TRUE)
if (is.na(sampled_value)) return(0) else return(sampled_value)
} else {
return(0)
}
})
}
# Time sequence
time <- seq(1, 365 * 5, by = 1)
# Temperature and photoperiod functions
get_temperature <- function(time) {
6.049043 * (1 - 1.681684 * cos(2 * pi * (1.045027 * time + 684.023466) / 365))
}
get_photoperiod <- function(time) {
12.145428 * (1 + (-0.305279) * cos(2 * pi * (0.973365 * time + 14.455886) / 365))
}
# Model definition
culex_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
index <- which.min(abs(time - time_seq))
temp <- temperature[index]
R <- sampled_rainfall[index]
photo <- photoperiod[index]
E <- pmax(E, 0); L <- pmax(L, 0); P <- pmax(P, 0); A <- pmax(A, 0); A_d <- pmax(A_d, 0)
phi_A <- (exp(-0.015 * (temp - 22)^2) * (1 + 1.2)) * (exp(-0.05 * (R - 10)^2) / (1.2 + exp(-0.05 * (R - 10)^2)))
rho_E <- 0.5 * (exp(-0.011 * (temp - 22)^2)) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))
rho_L <- 0.01 + (0.35 - 0.01) * ((exp(-0.013 * (temp - 22)^2) * ((2.5 * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))) /
(exp(0) * ((2.5 * exp(0)) / (exp(0) + 1.5))))
rho_P <- 0.5 * exp(-0.012 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))
mu_E <-  0.001 * (temp - 20)^2 + 0.15
mu_L <- 0.0025 * (temp - 20)^2 + 0.2
mu_P <- 0.001 * (temp - 20)^2 + 0.15
mu_A <- 0.0005714 * exp(0.1679139 * temp)
delta <- 1 / (1 + exp(-(-2.0285) * (photo - 14.5955)))
gamma <- 1 - delta
dE <- (b * phi_A * (1 - (A + A_d) / K) * A) - ((rho_E + mu_E) * E)
dL <- (rho_E * E) - ((rho_L + mu_L + sigma_L) * L)
dP <- (rho_L * L) - ((rho_P + mu_P) * P)
dA <- (rho_P * P + gamma * A_d) - ((mu_A + delta) * A)
dA_d <- (delta * A) - ((gamma + mu_A_d) * A_d)
return(list(c(dE, dL, dP, dA, dA_d)))
})
}
# Parameters and initial state
parameters <- c(b = 300, K = 1e8, sigma_L = 0.00, mu_A_d = 0.0036)
initial_state <- c(E = 100, L = 100, P = 100, A = 100, A_d = 100)
# Parallel replicate function
run_simulation <- function(run_id) {
local_time_seq <- time
assign("time_seq", local_time_seq, envir = .GlobalEnv)
assign("sampled_rainfall", sample_rainfall_vector(local_time_seq, rainfall_data), envir = .GlobalEnv)
assign("temperature", get_temperature(local_time_seq), envir = .GlobalEnv)
assign("photoperiod", get_photoperiod(local_time_seq), envir = .GlobalEnv)
out <- ode(
y = initial_state,
times = local_time_seq,
func = function(t, y, parms) culex_model(t, y, parms),
parms = parameters,
method = "lsoda"
)
df <- as.data.frame(out)
df$run <- run_id
return(df)
}
# Run in parallel
n_runs <- 20
n_cores <- parallel::detectCores() - 1
all_runs <- mclapply(1:n_runs, run_simulation, mc.cores = n_cores)
# Combine and post-process results
combined_results <- bind_rows(all_runs) %>%
filter(time >= 365 * 2 + 1) %>%
mutate(plot_time = time - 365 * 2)
# Plot
ggplot(combined_results, aes(x = plot_time, y = A, group = factor(run))) +
geom_line(alpha = 0.4, aes(color = factor(run))) +
scale_color_viridis_d(option = "plasma", guide = "none") +
labs(
title = "Adult Mosquito Population Trajectories (Years 3–5)",
x = "Time (days since start of Year 3)",
y = "Adult Population"
) +
theme_bw() +
geom_vline(xintercept = c(365, 730), linetype = "dashed", color = "gray50")
# 1. Convert to long format
combined_long <- combined_results %>%
pivot_longer(cols = c(E, L, P, A, A_d),
names_to = "Stage",
values_to = "Population")
# 2. Add actual dates for plotting
combined_long <- combined_long %>%
mutate(plot_date = as.Date("2020-01-01") + plot_time)
# 3. Calculate mean and 95% CI
ci_trend <- combined_long %>%
group_by(plot_date, Stage) %>%
summarize(
mean = mean(Population),
lower = quantile(Population, probs = 0.025),
upper = quantile(Population, probs = 0.975),
.groups = "drop"
)
# 4. Express population in hundreds
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
# 5. Set stage colors (define before plotting)
stage_colors <- c(
"E" = "#1b9e77",
"L" = "#d95f02",
"P" = "#7570b3",
"A" = "#e7298a",
"A_d" = "#66a61e"
)
# 6. Create the faceted plot
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14)
)
# 7. Show the plot
facet_plot3
# 1. Convert to long format
combined_long <- combined_results %>%
pivot_longer(cols = c(E, L, P, A, A_d),
names_to = "Stage",
values_to = "Population")
# 2. Add actual dates for plotting
combined_long <- combined_long %>%
mutate(plot_date = as.Date("2020-01-01") + plot_time)
# 3. Calculate mean and 95% CI
ci_trend <- combined_long %>%
group_by(plot_date, Stage) %>%
summarize(
mean = mean(Population),
lower = quantile(Population, probs = 0.025),
upper = quantile(Population, probs = 0.975),
.groups = "drop"
)
# 4. Express population in hundreds
combined_long <- combined_long %>%
mutate(Population_scaled = Population / 100)
ci_trend <- ci_trend %>%
mutate(mean_scaled = mean / 100,
lower_scaled = lower / 100,
upper_scaled = upper / 100)
# 5. Set stage colors (define before plotting)
stage_colors <- c(
"E" = "#1b9e77",
"L" = "#d95f02",
"P" = "#7570b3",
"A" = "#e7298a",
"A_d" = "#66a61e"
)
# 6. Create the faceted plot
facet_plot3 <- ggplot() +
geom_line(data = combined_long,
aes(x = plot_date, y = Population_scaled, group = run),
color = "gray60", alpha = 0.5, show.legend = FALSE) +
geom_ribbon(data = ci_trend,
aes(x = plot_date, ymin = lower_scaled, ymax = upper_scaled, fill = Stage),
alpha = 0.3, show.legend = FALSE) +
geom_line(data = ci_trend,
aes(x = plot_date, y = mean_scaled, color = Stage),
linewidth = 1.2, show.legend = FALSE) +
facet_wrap(~Stage, scales = "free_y", ncol = 2) +
scale_color_manual(values = stage_colors) +
scale_fill_manual(values = stage_colors) +
scale_x_date(
date_breaks = "2 month",
date_labels = "%b"
) +
labs(
x = "Month",
y = bquote(bold("Population (×10"^2*")"))
) +
geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01")),
linetype = "dashed", color = "gray50") +
theme_bw() +
theme(
strip.text = element_text(face = "bold", size = 16),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14)
)
# 7. Show the plot
facet_plot3
getwd()
setwd("~/Documents/Documents - Joseph's MacBook/Github/joseph.baafi")
ls -l
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
