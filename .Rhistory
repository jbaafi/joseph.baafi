total_abundance_rain <- results_replicates %>%
group_by(Scenario, Replicate, Total_Rainfall) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
# Plot with y-axis in millions
ggplot(peak_abundance, aes(x = Scenario, y = Peak_Abundance / 1e6, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
labs(
title = "Peak Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Peak Adult Abundance (millions)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Required packages
library(deSolve)
library(dplyr)
library(ggplot2)
library(tidyr)
library(parallel)
# Load rainfall data
rainfall_data <- read.csv(file = "rainfall_data.csv")
# Time and climate inputs
time <- seq(1, 365 * 5, by = 1)
photoperiod <- 12.145428 * (1 + (-0.305279) * cos(2 * pi * (0.973365 * time + 14.455886) / 365))
temperature <- 6.049043 * (1 - 1.681684 * cos(2 * pi * (1.045027 * time + 684.023466) / 365))
# Initial conditions and parameters
initial_state <- c(E = 100, L = 100, P = 100, A = 100, A_d = 100)
parameters <- c(b = 300, K = 1e8, sigma_L = 0.00, mu_A_d = 0.0036)
rainfall_scenarios <- c("baseline", "dry", "wet", "erratic")
# Rainfall sampling function
sample_rainfall_vector <- function(times, data, scenario = "baseline") {
sapply(times, function(t) {
ref_date <- as.Date("2008-01-01") + t
month <- as.numeric(format(ref_date, "%m"))
monthly_data <- data %>% filter(Month == month) %>% pull(Total.Rain.mm)
base_val <- if (length(monthly_data) > 0) sample(monthly_data, 1, replace = TRUE) else 0
if (scenario == "dry") return(base_val * 0.5)
if (scenario == "wet") return(base_val * 1.5)
if (scenario == "erratic") return(base_val * runif(1, 0.1, 2.0))
return(base_val)
})
}
# Culex model function
culex_model_scenario <- function(time, state, parameters, temp_vec, rainfall_vec, full_time) {
with(as.list(c(state, parameters)), {
index <- which.min(abs(time - full_time))
temp <- temp_vec[index]
R <- rainfall_vec[index]
photo <- photoperiod[index]
E <- pmax(E, 0); L <- pmax(L, 0); P <- pmax(P, 0); A <- pmax(A, 0); A_d <- pmax(A_d, 0)
phi_A <- (exp(-0.015 * (temp - 22)^2) * 2.2) * (exp(-0.05 * (R - 10)^2) / (1.2 + exp(-0.05 * (R - 10)^2)))
rho_E <- 0.5 * exp(-0.011 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))
rho_L <- 0.01 + (0.35 - 0.01) * ((exp(-0.013 * (temp - 22)^2) * ((2.5 * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))) / (exp(0) * ((2.5 * exp(0)) / (exp(0) + 1.5))))
rho_P <- 0.5 * exp(-0.012 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))
mu_E <-  0.001 * (temp - 20)^2 + 0.15
mu_L <- 0.0025 * (temp - 20)^2 + 0.2
mu_P <- 0.001 * (temp - 20)^2 + 0.15
mu_A <- 0.0005714 * exp(0.1679139 * temp)
delta <- 1 / (1 + exp(-(-2.0285) * (photo - 14.5955)))
gamma <- 1 - delta
dE <- (b * phi_A * (1 - (A + A_d) / K) * A) - ((rho_E + mu_E) * E)
dL <- (rho_E * E) - ((rho_L + mu_L + sigma_L) * L)
dP <- (rho_L * L) - ((rho_P + mu_P) * P)
dA <- (rho_P * P + gamma * A_d) - ((mu_A + delta) * A)
dA_d <- (delta * A) - ((gamma + mu_A_d) * A_d)
return(list(c(dE, dL, dP, dA, dA_d)))
})
}
# Parallel simulation parameters
n_reps <- 50
n_cores <- detectCores() - 1
# Function to run a single replicate
run_replicate <- function(scenario, rep_id) {
set.seed(as.integer(Sys.time()) + rep_id)
rainfall_vec <- sample_rainfall_vector(time, rainfall_data, scenario)
total_rain <- sum(rainfall_vec)
out <- ode(
y = initial_state,
times = time,
func = function(t, y, parms) culex_model_scenario(t, y, parms, temperature, rainfall_vec, time),
parms = parameters,
method = "lsoda"
) %>%
as.data.frame() %>%
mutate(Replicate = rep_id, Scenario = scenario, Total_Rainfall = total_rain)
return(out)
}
# Run all simulations in parallel for each scenario
results_replicates <- lapply(rainfall_scenarios, function(scenario) {
mclapply(1:n_reps, function(i) run_replicate(scenario, i), mc.cores = n_cores) %>%
bind_rows()
}) %>% bind_rows() %>%
filter(time >= 730)
# Summarise peak abundance per replicate
peak_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Peak_Abundance = max(A), .groups = "drop")
# Plot with y-axis in log scale to reveal full spread
ggplot(peak_abundance, aes(x = Scenario, y = Peak_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Peak Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Peak Adult Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Summarise total abundance per replicate
total_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
# Log-scaled total abundance boxplot
ggplot(total_abundance, aes(x = Scenario, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Total Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Total Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Required packages
library(deSolve)
library(dplyr)
library(ggplot2)
library(tidyr)
library(parallel)
library(ggrepel)
# Load rainfall data
rainfall_data <- read.csv(file = "rainfall_data.csv")
# Time and climate inputs
time <- seq(1, 365 * 5, by = 1)
photoperiod <- 12.145428 * (1 + (-0.305279) * cos(2 * pi * (0.973365 * time + 14.455886) / 365))
temperature <- 6.049043 * (1 - 1.681684 * cos(2 * pi * (1.045027 * time + 684.023466) / 365))
# Initial conditions and parameters
initial_state <- c(E = 100, L = 100, P = 100, A = 100, A_d = 100)
parameters <- c(b = 300, K = 1e8, sigma_L = 0.00, mu_A_d = 0.0036)
rainfall_scenarios <- c("baseline", "dry", "wet", "erratic")
# Rainfall sampling function
sample_rainfall_vector <- function(times, data, scenario = "baseline") {
sapply(times, function(t) {
ref_date <- as.Date("2008-01-01") + t
month <- as.numeric(format(ref_date, "%m"))
monthly_data <- data %>% filter(Month == month) %>% pull(Total.Rain.mm)
base_val <- if (length(monthly_data) > 0) sample(monthly_data, 1, replace = TRUE) else 0
if (scenario == "dry") return(base_val * 0.5)
if (scenario == "wet") return(base_val * 1.5)
if (scenario == "erratic") return(base_val * runif(1, 0.1, 2.0))
return(base_val)
})
}
# Culex model function
culex_model_scenario <- function(time, state, parameters, temp_vec, rainfall_vec, full_time) {
with(as.list(c(state, parameters)), {
index <- which.min(abs(time - full_time))
temp <- temp_vec[index]
R <- rainfall_vec[index]
photo <- photoperiod[index]
E <- pmax(E, 0); L <- pmax(L, 0); P <- pmax(P, 0); A <- pmax(A, 0); A_d <- pmax(A_d, 0)
phi_A <- (exp(-0.015 * (temp - 22)^2) * 2.2) * (exp(-0.05 * (R - 10)^2) / (1.2 + exp(-0.05 * (R - 10)^2)))
rho_E <- 0.5 * exp(-0.011 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))
rho_L <- 0.01 + (0.35 - 0.01) * ((exp(-0.013 * (temp - 22)^2) * ((2.5 * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))) / (exp(0) * ((2.5 * exp(0)) / (exp(0) + 1.5))))
rho_P <- 0.5 * exp(-0.012 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))
mu_E <-  0.001 * (temp - 20)^2 + 0.15
mu_L <- 0.0025 * (temp - 20)^2 + 0.2
mu_P <- 0.001 * (temp - 20)^2 + 0.15
mu_A <- 0.0005714 * exp(0.1679139 * temp)
delta <- 1 / (1 + exp(-(-2.0285) * (photo - 14.5955)))
gamma <- 1 - delta
dE <- (b * phi_A * (1 - (A + A_d) / K) * A) - ((rho_E + mu_E) * E)
dL <- (rho_E * E) - ((rho_L + mu_L + sigma_L) * L)
dP <- (rho_L * L) - ((rho_P + mu_P) * P)
dA <- (rho_P * P + gamma * A_d) - ((mu_A + delta) * A)
dA_d <- (delta * A) - ((gamma + mu_A_d) * A_d)
return(list(c(dE, dL, dP, dA, dA_d)))
})
}
# Parallel simulation parameters
n_reps <- 50
n_cores <- detectCores() - 1
# Function to run a single replicate
run_replicate <- function(scenario, rep_id) {
set.seed(as.integer(Sys.time()) + rep_id)
rainfall_vec <- sample_rainfall_vector(time, rainfall_data, scenario)
total_rain <- sum(rainfall_vec)
out <- ode(
y = initial_state,
times = time,
func = function(t, y, parms) culex_model_scenario(t, y, parms, temperature, rainfall_vec, time),
parms = parameters,
method = "lsoda"
) %>%
as.data.frame() %>%
mutate(Replicate = rep_id, Scenario = scenario, Total_Rainfall = total_rain)
return(out)
}
# Run all simulations in parallel for each scenario
results_replicates <- lapply(rainfall_scenarios, function(scenario) {
mclapply(1:n_reps, function(i) run_replicate(scenario, i), mc.cores = n_cores) %>%
bind_rows()
}) %>% bind_rows() %>%
filter(time >= 730)
# Summarise peak abundance per replicate
peak_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Peak_Abundance = max(A), .groups = "drop")
# Annotated log-scale peak abundance plot
ggplot(peak_abundance, aes(x = Scenario, y = Peak_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
geom_text_repel(data = peak_abundance %>% filter(Peak_Abundance > 1e6),
aes(label = round(Peak_Abundance, -2)), size = 3, nudge_x = 0.3) +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Peak Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Peak Adult Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(legend.position = "none")
# Total abundance per replicate
total_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
# Log-scaled total abundance boxplot
ggplot(total_abundance, aes(x = Scenario, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Total Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Total Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(legend.position = "none")
# Linear-scale version of total abundance plot
ggplot(total_abundance, aes(x = Scenario, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
labs(
title = "Total Adult Mosquito Abundance by Rainfall Scenario (Years 3–5) - Linear Scale",
x = "Rainfall Scenario",
y = "Total Abundance"
) +
theme_bw() +
theme(legend.position = "none")
# Temporal breakdown of abundance by year
yearly_abundance <- results_replicates %>%
mutate(Year = case_when(
time <= 1095 ~ "Year 3",
time <= 1460 ~ "Year 4",
TRUE ~ "Year 5"
)) %>%
group_by(Scenario, Replicate, Year) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
ggplot(yearly_abundance, aes(x = Year, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(position = position_dodge(width = 0.8), alpha = 0.7) +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
labs(
title = "Yearly Adult Mosquito Abundance by Scenario",
x = "Year",
y = "Total Abundance"
) +
theme_bw() +
theme(plot.title = element_text(face = "bold", size = 14))
getwd()
setwd("/Users/jbaafi/Documents/Documents - Joseph's MacBook/Github/joseph.baafi")
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_preview()
rm(list = ls())
# Required packages
library(deSolve)
library(dplyr)
library(ggplot2)
library(tidyr)
library(parallel)
# Load rainfall data
rainfall_data <- read.csv(file = "rainfall_data.csv")
# Time and climate inputs
time <- seq(1, 365 * 5, by = 1)
photoperiod <- 12.145428 * (1 + (-0.305279) * cos(2 * pi * (0.973365 * time + 14.455886) / 365))
temperature <- 6.049043 * (1 - 1.681684 * cos(2 * pi * (1.045027 * time + 684.023466) / 365))
# Initial conditions and parameters
initial_state <- c(E = 100, L = 100, P = 100, A = 100, A_d = 100)
parameters <- c(b = 300, K = 1e8, sigma_L = 0.00, mu_A_d = 0.0036)
rainfall_scenarios <- c("baseline", "dry", "wet", "erratic")
# Rainfall sampling function
sample_rainfall_vector <- function(times, data, scenario = "baseline") {
sapply(times, function(t) {
ref_date <- as.Date("2008-01-01") + t
month <- as.numeric(format(ref_date, "%m"))
monthly_data <- data %>% filter(Month == month) %>% pull(Total.Rain.mm)
base_val <- if (length(monthly_data) > 0) sample(monthly_data, 1, replace = TRUE) else 0
if (scenario == "dry") return(base_val * 0.5)
if (scenario == "wet") return(base_val * 1.5)
if (scenario == "erratic") return(base_val * runif(1, 0.1, 2.0))
return(base_val)
})
}
# Culex model function
culex_model_scenario <- function(time, state, parameters, temp_vec, rainfall_vec, full_time) {
with(as.list(c(state, parameters)), {
index <- which.min(abs(time - full_time))
temp <- temp_vec[index]
R <- rainfall_vec[index]
photo <- photoperiod[index]
E <- pmax(E, 0); L <- pmax(L, 0); P <- pmax(P, 0); A <- pmax(A, 0); A_d <- pmax(A_d, 0)
phi_A <- (exp(-0.015 * (temp - 22)^2) * 2.2) * (exp(-0.05 * (R - 10)^2) / (1.2 + exp(-0.05 * (R - 10)^2)))
rho_E <- 0.5 * exp(-0.011 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) / (exp(-0.05 * (R - 15)^2) + 1.5))
rho_L <- 0.01 + (0.35 - 0.01) * ((exp(-0.013 * (temp - 22)^2) * ((2.5 * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))) / (exp(0) * ((2.5 * exp(0)) / (exp(0) + 1.5))))
rho_P <- 0.5 * exp(-0.012 * (temp - 22)^2) * (((1 + 1.5) * exp(-0.05 * (R - 15)^2)) /
(exp(-0.05 * (R - 15)^2) + 1.5))
mu_E <-  0.001 * (temp - 20)^2 + 0.15
mu_L <- 0.0025 * (temp - 20)^2 + 0.2
mu_P <- 0.001 * (temp - 20)^2 + 0.15
mu_A <- 0.0005714 * exp(0.1679139 * temp)
delta <- 1 / (1 + exp(-(-2.0285) * (photo - 14.5955)))
gamma <- 1 - delta
dE <- (b * phi_A * (1 - (A + A_d) / K) * A) - ((rho_E + mu_E) * E)
dL <- (rho_E * E) - ((rho_L + mu_L + sigma_L) * L)
dP <- (rho_L * L) - ((rho_P + mu_P) * P)
dA <- (rho_P * P + gamma * A_d) - ((mu_A + delta) * A)
dA_d <- (delta * A) - ((gamma + mu_A_d) * A_d)
return(list(c(dE, dL, dP, dA, dA_d)))
})
}
# Parallel simulation parameters
n_reps <- 50
n_cores <- detectCores() - 1
# Function to run a single replicate
run_replicate <- function(scenario, rep_id) {
set.seed(as.integer(Sys.time()) + rep_id)
rainfall_vec <- sample_rainfall_vector(time, rainfall_data, scenario)
total_rain <- sum(rainfall_vec)
out <- ode(
y = initial_state,
times = time,
func = function(t, y, parms) culex_model_scenario(t, y, parms, temperature, rainfall_vec, time),
parms = parameters,
method = "lsoda"
) %>%
as.data.frame() %>%
mutate(Replicate = rep_id, Scenario = scenario, Total_Rainfall = total_rain)
return(out)
}
# Run all simulations in parallel for each scenario
results_replicates <- lapply(rainfall_scenarios, function(scenario) {
mclapply(1:n_reps, function(i) run_replicate(scenario, i), mc.cores = n_cores) %>%
bind_rows()
}) %>% bind_rows() %>%
filter(time >= 730)
# Plotting and summaries
summary_rain <- results_replicates %>%
group_by(Scenario, time) %>%
summarise(
A_mean = mean(A),
A_sd = sd(A),
A_lower = quantile(A, 0.025),
A_upper = quantile(A, 0.975),
.groups = "drop"
)
rain_colors <- c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")
plot_data <- results_replicates %>%
mutate(Replicate = as.factor(Replicate)) %>%
left_join(summary_rain, by = c("Scenario", "time"))
ggplot(plot_data, aes(x = time, y = A, group = Replicate)) +
geom_line(alpha = 0.3, aes(color = Scenario)) +
geom_line(aes(y = A_mean), linewidth = 1, color = "black") +
scale_color_manual(values = rain_colors) +
facet_wrap(~ Scenario, ncol = 2, scales = "free_y") +
labs(
title = "Adult Mosquito Abundance Under Rainfall Scenarios",
x = "Time (days since year 3)", y = "Adult Abundance",
color = "Scenario"
) +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold"), legend.position = "none")
# Summarise peak abundance per replicate
peak_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Peak_Abundance = max(A), .groups = "drop")
# Plot with y-axis in log scale to reveal full spread
ggplot(peak_abundance, aes(x = Scenario, y = Peak_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Peak Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Peak Adult Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Summarise total abundance per replicate
total_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
# Log-scaled total abundance boxplot
ggplot(total_abundance, aes(x = Scenario, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Total Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Total Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
ggplot(plot_data, aes(x = time, y = A, group = Replicate)) +
geom_line(alpha = 0.3, aes(color = Scenario)) +
geom_line(aes(y = A_mean), linewidth = 1, color = "black") +
scale_color_manual(values = rain_colors) +
facet_wrap(~ Scenario, ncol = 2, scales = "free_y") +
labs(
title = "Adult Mosquito Abundance Under Rainfall Scenarios",
x = "Time (days since year 3)", y = "Adult Abundance",
color = "Scenario"
) +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold"), legend.position = "none")
# Summarise peak abundance per replicate
peak_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Peak_Abundance = max(A), .groups = "drop")
# Plot with y-axis in log scale to reveal full spread
ggplot(peak_abundance, aes(x = Scenario, y = Peak_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Peak Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Peak Adult Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Summarise total abundance per replicate
total_abundance <- results_replicates %>%
group_by(Scenario, Replicate) %>%
summarise(Total_Abundance = sum(A), .groups = "drop")
# Log-scaled total abundance boxplot
ggplot(total_abundance, aes(x = Scenario, y = Total_Abundance, fill = Scenario)) +
geom_boxplot(alpha = 0.7, color = "black") +
scale_fill_manual(values = c("baseline" = "black", "dry" = "blue", "wet" = "red", "erratic" = "yellow")) +
scale_y_log10(labels = scales::label_math(10^.x)) +
labs(
title = "Total Adult Mosquito Abundance by Rainfall Scenario (Years 3–5)",
x = "Rainfall Scenario",
y = "Total Abundance (log₁₀ scale)"
) +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
